@page "/authorDetails"
@page "/authorDetails/{id:int}/{nameAuthor}"
@inject NavigationManager NavigationManager

<h3>Lista de libros del autor @nameAuthor</h3>



<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                AllowSorting="true" PageSize="4" AllowPaging="true" GridLines="DataGridGridLines.Both"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@listBooks" TItem="books" LogicalFilterOperator="LogicalFilterOperator.Or">

    <Columns>
        <RadzenDataGridColumn TItem="books" Property="id" Filterable="false" Title="ID"
                             TextAlign="TextAlign.Center" />

        <RadzenDataGridColumn TItem="books" Property="title" Filterable="false" Title="Title"
                              TextAlign="TextAlign.Center" />
    </Columns>

</RadzenDataGrid>

@code {

    [Parameter]
    public int id { get; set; }
    [Parameter]
    public string nameAuthor { get; set; }
    private readonly HttpClient client;
    private List<books> listBooks = new List<books>();

    public AuthorsDetails()
    {
        client = new HttpClient();
        listBooks = new List<books>();
    }

    private async Task<List<books>> GetBooks()
    {
        var response = await client.GetAsync($"{SharedUtils.urlEndpoint}/Book/Author/{id}");
        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();
        ResponseApi responseAuthors = JsonConvert.DeserializeObject<ResponseApi>(responseBody);
        List<books> books = JsonConvert.DeserializeObject<List<books>>(responseAuthors.Object.ToString());
        return books;
    }

    protected override async Task OnInitializedAsync()
    {
        listBooks = await GetBooks();
    }

}
